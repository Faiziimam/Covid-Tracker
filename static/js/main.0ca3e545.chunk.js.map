{"version":3,"sources":["Infobox.jsx","util.js","Map.js","Table.js","LineGraph.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","cases","total","active","isRed","props","console","log","Card","onClick","className","CardContent","Typography","color","gutterBottom","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","prettyPrintStat","stat","numeral","format","showDataOnMap","casesType","map","country","Circle","center","countryInfo","lat","long","fillColor","fillOpacity","radius","Math","sqrt","Popup","style","backgroundImage","flag","Map","countries","zoom","TileLayer","url","attribution","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setZoom","mapCountries","setMapCountries","setCasesType","name","iso2","getCountriesData","FormControl","Select","onChange","event","countryCode","target","variant","MenuItem","e","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0ca3e545.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\r\nimport \"./infoBox.css\";\r\n\r\nfunction InfoBox({ title, cases, total, active, isRed, ...props }) {\r\n  console.log(title, active);\r\n  return (\r\n    <Card\r\n      onClick={props.onClick}\r\n      className={`infoBox ${active && \"infoBox--selected\"} ${\r\n        isRed && \"infoBox--red\"\r\n      }`}\r\n    >\r\n      <CardContent>\r\n        <Typography color=\"textSecondary\" gutterBottom>\r\n          {title}\r\n        </Typography>\r\n        <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>\r\n          {cases}\r\n        </h2>\r\n\r\n        <Typography className=\"infoBox__total\" color=\"textSecondary\">\r\n          {total} Total\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default InfoBox;","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\n\r\nconst casesTypeColors = {\r\n    cases: {\r\n      hex: \"#CC1034\",\r\n      rgb: \"rgb(204, 16, 52)\",\r\n      half_op: \"rgba(204, 16, 52, 0.5)\",\r\n      multiplier: 800,\r\n    },\r\n    recovered: {\r\n      hex: \"#7dd71d\",\r\n      rgb: \"rgb(125, 215, 29)\",\r\n      half_op: \"rgba(125, 215, 29, 0.5)\",\r\n      multiplier: 1200,\r\n    },\r\n    deaths: {\r\n      hex: \"#fb4443\",\r\n      rgb: \"rgb(251, 68, 67)\",\r\n      half_op: \"rgba(251, 68, 67, 0.5)\",\r\n      multiplier: 2000,\r\n    },\r\n  };\r\n\r\nexport const sortData=(data)=>{\r\n    const sortedData=[...data];\r\n\r\n    sortedData.sort((a,b)=>{\r\n        if(a.cases>b.cases){\r\n            return -1;\r\n        }\r\n        else\r\n          {\r\n              return 1;\r\n          }\r\n    })\r\n    return sortedData;\r\n}\r\n\r\n// here i can use Terenary operator\r\n// return sortedData.sort((a,b)=>(a.cases>b.cases? 1:-1);\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\nexport const showDataOnMap = (data, casesType = \"cases\") =>\r\n  data.map((country) => (\r\n    <Circle\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      color={casesTypeColors[casesType].hex}\r\n      fillColor={casesTypeColors[casesType].hex}\r\n      fillOpacity={0.4}\r\n      radius={\r\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n      }\r\n    >\r\n      <Popup>\r\n        <div className=\"info-container\">\r\n          <div\r\n            className=\"info-flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          ></div>\r\n          <div className=\"info-name\">{country.country}</div>\r\n          <div className=\"info-confirmed\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-recovered\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-deaths\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));","import React from \"react\";\r\nimport {MapContainer as LeafletMap , TileLayer} from \"react-leaflet\";\r\nimport \"./Map.css\"\r\nimport { showDataOnMap } from \"./util\";\r\n\r\n\r\nfunction Map({ countries, casesType, center, zoom }){\r\n   return(\r\n     <div className=\"map\">\r\n       <LeafletMap center={center} zoom={zoom}>\r\n         <TileLayer\r\n           url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n           attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n          />\r\n\r\n      {showDataOnMap(countries, casesType)} \r\n\r\n\r\n       </LeafletMap>\r\n     </div>\r\n   );\r\n}\r\n\r\nexport default Map;","import React from 'react'\r\nimport \"./table.css\"\r\nimport numeral from \"numeral\";\r\nfunction Table({countries}) {\r\n    return (\r\n        <div className=\"table\">\r\n\r\n        {countries.map(({country,cases})=>(\r\n            <tr>\r\n                <td>{country}</td>\r\n               <td>\r\n               <strong>{numeral(cases).format(\"0,0\")}</strong>\r\n               </td>\r\n            </tr>\r\n        ))}\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Table\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          // Include a dollar sign in the ticks\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst buildChartData = (data, casesType) => {\r\n  let chartData = [];\r\n  let lastDataPoint;\r\n  for (let date in data.cases) {\r\n    if (lastDataPoint) {\r\n      let newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType=\"cases\", ...props }) {\r\n  const [data, setData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n        .then((response) => {\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n          let chartData = buildChartData(data, casesType);\r\n          setData(chartData);\r\n          console.log(chartData);\r\n          // buildChart(chartData);\r\n        });\r\n    };\r\n\r\n    fetchData();\r\n  }, [casesType]);\r\n\r\n  return (\r\n    <div className={props.className}>\r\n      {data?.length > 0 && (\r\n        <Line\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                borderColor: \"#CC1034\",\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n          options={options}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;","import React,{useEffect, useState} from \"react\";\nimport './App.css';\nimport {Card, CardContent, FormControl,MenuItem,Select} from \"@material-ui/core\";\nimport InfoBox from \"./Infobox\";\nimport Map from \"./Map\"\nimport Table from \"./Table\"\nimport { sortData } from \"./util\"\nimport LineGraph from \"./LineGraph\"\nimport \"leaflet/dist/leaflet.css\";\nimport numeral from \"numeral\";\nimport {  prettyPrintStat } from \"./util\";\nfunction App() {\n  \n const [countries,setCountries]=useState([]);\n const [country,setCountry]=useState(\"worldwide\");\n const [countryInfo,setCountryInfo]=useState({});\n const [tableData,setTableData]=useState([]);\n const [mapCenter,setMapCenter]=useState({lat: 34.80746, lng: -40.4796})\n const [mapZoom, setZoom]=useState(3);\n const [mapCountries,setMapCountries]=useState([]);\n const [casesType,setCasesType]=useState(\"cases\");\n //useEffect is a piece of code it works on the basis of given condition.\n useEffect(()=>{\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n    .then((response)=>response.json())\n    .then((data)=>{\n      setCountryInfo(data);\n    });\n },[]);\n\n\n useEffect(()=>{\n\n  const getCountriesData=async()=>{\n     await fetch(\"https://disease.sh/v3/covid-19/countries\")\n    .then((response)=>response.json())\n    .then((data)=>{\n       const countries= data.map((country)=>({\n           name:country.country,\n           value:country.countryInfo.iso2 //iso=> return shortForm of countries i.e United State of America=usa\n         }));\n         const sortedData=sortData(data);\n         setCountries(countries);\n         setMapCountries(data);\n         setTableData(sortedData);\n    })\n  };\n  getCountriesData();\n },[]);\n//  \n   const onCountryChange=(event)=>{\n        const countryCode=event.target.value;\n        setCountry(countryCode);\n\n    const url=\n      countryCode===\"worldwide\"\n      ?\"https://disease.sh/v3/covid-19/all\"\n      : `https://disease.sh/v3/covid-19/countries/${countryCode}`\n  \n       fetch(url)\n      .then((response)=>response.json())\n      .then((data)=>{\n          setCountry(countryCode);\n\n            //All of the data from the JSON\n          setCountryInfo(data);\n          setMapCenter([data.countryInfo.lat,data.countryInfo.long])\n          setZoom(4)\n\n      });\n\n   };\n    console.log(\"Hellow\",countryInfo);\n\n  return (\n    <div className=\"app\">\n\n    <div className=\"app_left\">\n    <div className=\"app_header\">\n       <h1>COVID-19 TRACKER</h1>\n       <FormControl className=\"app_dropdown\">\n       <Select \n        onChange={onCountryChange}\n        variant=\"outlined\"\n        value={country}\n       >\n        <MenuItem value=\"worldwide\">WorldWide</MenuItem>\n       {countries.map(country=>(\n        <MenuItem value={country.value}>{country.name}</MenuItem>\n       ))}\n      \n      </Select>\n      </FormControl>\n       </div>\n\n   <div className=\"app_stats\">\n   <InfoBox\n            onClick={(e) => setCasesType(\"cases\")}\n            title=\"Coronavirus Cases\"\n            isRed\n            active={casesType === \"cases\"}\n            cases={prettyPrintStat(countryInfo.todayCases)}\n            total={numeral(countryInfo.cases).format(\"0.0a\")}\n          />\n          <InfoBox\n            onClick={(e) => setCasesType(\"recovered\")}\n            title=\"Recovered\"\n            active={casesType === \"recovered\"}\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n            total={numeral(countryInfo.recovered).format(\"0.0a\")}\n          />\n          <InfoBox\n            onClick={(e) => setCasesType(\"deaths\")}\n            title=\"Deaths\"\n            isRed\n            active={casesType === \"deaths\"}\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n            total={numeral(countryInfo.deaths).format(\"0.0a\")}\n          />\n   \n   </div>\n    <Map\n    countries={mapCountries}\n    casesType={casesType}\n    center={mapCenter}\n    zoom={mapZoom}\n      />\n    </div>\n    <Card className=\"app_right\">\n    <h3>Live Cases By Country</h3>\n    <Table countries={tableData}/>\n    <h3>WorldWide New {casesType}</h3>\n    <LineGraph className=\"app_graph\" casesType={casesType} />\n\n     <CardContent>\n     </CardContent>\n    </Card>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}